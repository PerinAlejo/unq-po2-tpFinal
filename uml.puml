@startuml tp

skinparam linetype polyline
skinparam linetype ortho

class Admin {

    + addCategory(category: Category): void
    + addHousingType(housing: HousingType): void
    + addService(service: Service): void
    + getServices(): List<Service>
    + addHousing(housing: Housing): void
    + getTopTenTenants(): List<Tenant>
    + getFreeHousings(): Set<Housing>
    + occupationRate(): double
    - busyHousings(): Set<Housing>
}

Admin -->"1" Categories :categories
Admin -->"1" HousingTypes :housingTypes
Admin -->"1" Services :services
Admin -->"1" BookingSystem :bookingSystem
Admin -->"*" Housing :housings

class BookingSystem{

    + getAllBookings(tenant: Tenant): List<Booking>
    + getAllBookings(): List<Booking>
    + getFutureBookings(tenant: Tenant): List<Booking>
    + getBookingsFromCity(tenant: Tenant, city: City): List<Booking>
    + getBookingCities(tenant: Tenant): List<City>
}

BookingSystem  -->"*"  Housing : housings


class Address {
    - houseLocation: String

    + getHouseLocation(): String
    + getCity(): City
    + getCountry(): Country
}
Address -->"1" Country:country
Address -->"1" City:city

class Booking {

    + getTenant(): Tenant
    + getHousing(): Housing
    + getOwner(): Owner
    + getRange(): DateRange
    + checkOut(rankings: List<Ranking>): void
    + startsAfter(date: LocalDate): boolean
    + isOnCity(city: City): boolean
    + getCity(): City
    + isBookedOn(date: LocalDate): boolean
    + isBookedOnRange(range: DateRange): boolean
    + cancelBook(): void
}

Booking --> "1" Housing : housing
Booking --> "1" Tenant : tenant
Booking --> "1" DateRange : range
Booking --> "1" PaymentMethod : paymentMethod

class BookingStatus {

    + isAvailable(range: DateRange): boolean
    + book(booking: Booking, housing: Housing): void
    + cancelBooking(booking: Booking, housing: Housing): void
}

BookingStatus --> "*" Booking : bookings
BookingStatus --> "*" Booking : waitlist

abstract class CancellationPolicy {

    + CancellationPolicy(housing: Housing)
    + getHousing(): Housing
    + getCancellationFee(range: DateRange): double
}

CancellationPolicy -->"1" Housing : housing

class Category {
    - name: String

    + Category(name: String)
    + getName(): String
}

class CategoryScore {
    - score: int

    + CategoryScore(category: Category, score: int)
    + getCategory(): Category
    + getScore(): int
}

CategoryScore -->"1" Category : category

class City {
    - name: String

    + City(name: String)
    + getName(): String
}

class Country {
    - name: String

    + Country(name: String)
    + getName(): String
}

class DateRange {

    - start : LocalDate
    - duration: int

    + getStart(): LocalDate
    + getEnd(): LocalDate
    + getOverlapDays(other: DateRange): long
    + overlaps(other: DateRange): boolean
    + startsAfter(date: LocalDate): boolean
    + contains(date: LocalDate): boolean
    + equals(o: Object): boolean
    + getDays(): int
    - isSameDate(other: DateRange): boolean
}

class Housing implements Rankeable {
    
    - area: float
    - capacity: int
   
    + getPrice(range: DateRange): double
    + getCapacity(): int
    + getAddress(): Address
    + isLocatedIn(city: City): boolean
    + isAvailable(dateRange: DateRange): boolean
    + getOwner(): Owner
    + getRankings(): List<Ranking>
    + addRanking(ranking: Ranking): void
    + getCity(): City
    + getCancelationFee(range: DateRange): double
    + getDefaultPaymentMethod(): PaymentMethod
    + getHousingType(): HousingType
    + book(booking: Booking): void
    + cancelBook(booking: Booking): void
    + priceDropped(newPrice: PriceForRange): void
    + markAsBooked(booking: Booking): void
    + bookingIsCancelled(booking: Booking): void
    + addObserver(observer: HousingObserver): void
    + removeObserver(observer: HousingObserver): void
}

Housing --> "1" HousingType :housingType
Housing --> "1" Address :address
Housing --> "1" Owner : owner
Housing --> "1" CancellationPolicy : cancellationPolicy
Housing --> "1" BookingStatus : bookingStatus
Housing --> "*" HousingObserver : observers
Housing --> "1" PriceCalculatorInterface : priceCalculator
Housing --> "*" PaymentMethod : paymentMethods
Housing --> "1" PaymentMethod : defaultPaymentMethod
Housing --> "*" Service : services
Housing --> "*" Picture : pictures
Housing --> "*" Ranking : rankings
Housing --> "*" HousingStayDetails : stayDetails


class HousingStayDetails {
    - checkIn: LocalDateTime
    - checkOut: LocalDateTime

    + HousingStayDetails(checkIn: LocalDateTime, checkOut: LocalDateTime)
    + getCheckIn(): LocalDateTime
    + getCheckOut(): LocalDateTime
}

class HousingType {
    - name: String

    + HousingType(name: String)
    + getName(): String
}

class Owner extends User implements Rankeable, Ranker{

    + Owner(fullName: String, email: String, phoneNumber: String, createdOn: LocalDateTime, bookingAcceptanceStrategy: BookingAcceptanceStrategy)
    + addRental(rental: Booking): void
    + getRentals(): List<Booking>
    + addRanking(ranking: Ranking): void
    + getRankings(): List<Ranking>
    + rank(ranking: Ranking): void
    + accept(booking: Booking): void
    + cancelBook(booking: Booking): void
}

Owner -->"*" Ranking:rankings
Owner -->"*" Booking:bookings
Owner -->"1" BookingAcceptanceStrategy:bookingAcceptanceStrategy

class Picture {
    - name: String
    - resourceUrl: String

    + Picture(name: String, resourceUrl: String)
    + getName(): String
    + getResourceUrl(): String
}

class PriceForRange {
    - price: double

    + PriceForRange(price: double, range: DateRange)
    + getPriceForRange(range: DateRange): double
    + getPrice() : double
    +getRange() : DateRange
}

PriceForRange -->"1" DateRange: range

class Ranking {
    - comment: String
    - rankedOn: LocalDate

    + Ranking(ranker: Ranker, ranked: Rankeable, comment: String, categoryScores: List<CategoryScore>)
    + getScores(): List<CategoryScore>
    + getComment(): String
    + getRanker(): Ranker
    + getRanked(): Rankeable
    + getRankedOn(): LocalDate
}

Ranking -->"1" Ranker:ranker
Ranking -->"1" Rankeable:ranked
Ranking -->"*" CategoryScore:categoryScores

class Tenant extends User implements Rankeable, Ranker{

    + Tenant(fullName: String, email: String, phoneNumber: String, createdOn: LocalDateTime)
    + addRanking(ranking: Ranking): void
    + getRankings(): List<Ranking>
    + rank(ranking: Ranking): void
    + book(housing: Housing, range: DateRange, paymentMethod: PaymentMethod): void
}

Tenant -->"*" Ranking:rankings

class User {
    - fullName: String
    - email: String
    - phoneNumber: String
    - createdOn: LocalDateTime

    + User(fullName: String, email: String, phoneNumber: String, createdOn: LocalDateTime)
    + getFullName(): String
    + getEmail(): String
    + getPhoneNumber(): String
    + getCreatedOn(): LocalDateTime
}

class BookingEmailSender implements HousingObserver {

    + notifyBookingAccepted(housing: Housing ,  booking:Booking): void
    + notifyBookingCancelled(housing:Housing , booking:Booking ): void
    + notifyPriceDrop(housing:Housing , newPrice:double ): void

}

BookingEmailSender --> "1" EmailSender : emailSender

class Cash  implements PaymentMethod{
    + applyCharge(amount: double): void
    + receivePayment(amount: double): void
}

class CreditCard implements PaymentMethod{
    + applyCharge(amount: double): void
    + receivePayment(amount: double): void
}

class DebitCard implements PaymentMethod {
    + applyCharge(amount: double): void
    + receivePayment(amount: double): void
}

class MobileAppHousingAvailabilityNotifier implements HousingObserver {
    + notifyBookingAccepted(housing: Housing ,  booking:Booking): void
    + notifyBookingCancelled(housing:Housing , booking:Booking ): void
    + notifyPriceDrop(housing:Housing , newPrice:double ): void
}

MobileAppHousingAvailabilityNotifier --> "1" PopUpWindow : popUpWindow

interface PopUpWindow {
    + popUp(message:String , color:String , fontSize:int ) : void

}



class FreeCancellation extends CancellationPolicy{
    - MAX_DAYS_FOR_FREE_CANCELLATION: int

    + getCancellationFee(range: DateRange): double
    - twoDaysRange(range: DateRange): DateRange
}

class IntermediateCancellation extends CancellationPolicy{
    + getCancellationFee(range: DateRange): double
}

class NoCancellation extends CancellationPolicy{
    + getCancellationFee(range: DateRange): double
}

class PriceCalculatorImpl implements PriceCalculatorInterface{

    + getPrice(range: DateRange): double
    + addPrice(newPrice:PriceForRange , housing:Housing ): void
}

PriceCalculatorImpl -->"*" PriceForRange:priceForRanges

class PriceDropNotifier implements HousingObserver {

    + notifyBookingAccepted(housing: Housing ,  booking:Booking): void
    + notifyBookingCancelled(housing:Housing , booking:Booking ): void
    + notifyPriceDrop(housing:Housing , newPrice:double ): void
}

PriceDropNotifier --> "1" HomePagePublisher : publisher

class CapacityFilter implements SearchFilter{
    - capacity: int

    + test(housing: Housing): boolean
}

class CityFilter implements SearchFilter{

    + test(housing: Housing): boolean
}

CityFilter -->"1" City : city

class DateRangeFilter implements SearchFilter{

    + test(housing: Housing): boolean
}

DateRangeFilter -->"1" DateRange:dateRange

class HousingSearch {

    + filter(housingList: List<Housing>): List<Housing>
}

HousingSearch -->"*" SearchFilter:filterList


class MinPriceFilter implements SearchFilter{
    - minPrice: double
    
    + test(housing: Housing): boolean
}

MinPriceFilter -->"1" DateRange:dateRange

class MaxPriceFilter implements SearchFilter{
    - maxPrice: double
    
    + test(housing: Housing): boolean
}

MaxPriceFilter -->"1" DateRange:dateRange

class HousingSearchBuilder {

    + HousingSearchBuilder(city: City, dateRange: DateRange)
    + setCapacity(capacity: int): HousingSearchBuilder
    + setMinPrice(minPrice: double): HousingSearchBuilder
    + setMaxPrice(maxPrice: double): HousingSearchBuilder
    + build(): HousingSearch
}

HousingSearchBuilder -->"*" HousingSearchBuilder:filterList
HousingSearchBuilder -->"1" DateRange: dateRange

class CategoryAverageView {
    - average: double

    + CategoryAverageView(average: double, category: Category)
    + getAverage(): double
    + getCategory(): Category
}

CategoryAverageView -->"1" Category: category

class CommentView {
    - text: String
    - commentedOn: LocalDate

    + CommentView(text: String, commentedOn: LocalDate, by: Ranker, scores: List<CategoryScore>)
    + fromRanking(ranking: Ranking): CommentView
    + getText(): String
    + getCommentedOn(): LocalDate
    + getBy(): Ranker
    + getScores(): List<CategoryScore>
}

CommentView -->"1" Ranker: by
CommentView -->"*" CategoryScore:scores

class HousingView {

    + HousingView(housing: Housing)
    + comments(): List<CommentView>
    + categoryAverages(): List<CategoryAverageView>
    + ownerDetails(): OwnerView
}

HousingView -->"1" Housing: housing

class OwnerRentalView {

    + OwnerRentalView(owner: Owner, currentHousing: Housing)
    + getTotalRentsForHousing(): long
    + getTotalRentsForAllHousings(): int
    + getTotalTimesHasRentedCurrentHousing(): long
    + getRentalsForCurrentHousing(): List<Housing>
}

OwnerRentalView -->"1" Owner: owner
OwnerRentalView -->"1" Housing: housing


class OwnerView {

    + OwnerView(owner: Owner, currentHousing: Housing)
    + getAllScores(): List<Integer>
    + getAverageScore(): double
    + getCreatedOn(): LocalDateTime
    + getOwnerRentalView(): OwnerRentalView
}

OwnerView -->"1" Owner: owner
OwnerView -->"1" Housing: currentHousing



interface SearchFilter {
	+test(housing:housing) : boolean 
}

interface Categories{
	+  add(category:Category) : void
}

interface HousingTypes{
	+ add(housingType : HousingType) : void
}

interface Services{
	+  add(service:Service):void
	+  getAll():List<Service>
}


interface EmailSender {
	+  sendEmail(to:String, body:String):void
}

interface HousingObserver {
    + notifyBookingAccepted(housing: Housing ,  booking:Booking): void
    + notifyBookingCancelled(housing:Housing , booking:Booking ): void
    + notifyPriceDrop(housing:Housing , newPrice:double ): void
}

interface HomePagePublisher {
	+ publish(message:String ): void
}

interface PaymentMethod{
	+applyCharge(amount:double):void
	+ receivePayment(amount:double):void
}

interface PriceCalculatorInterface {
	+ getPrice(range:DateRange):double
    + addPrice(newPrice:PriceForRange , housing:Housing ): void
}


interface Rankeable {
	+ addRanking(ranking:Ranking):void
	+ getRankings():List<Ranking>
}

interface Ranker {
	+ rank(ranking:Ranking):void
}


interface Service {
	+ getName():String
}

interface BookingAcceptanceObservable {
    + addObserver(observer: BookingAcceptedObserver ): void
	+ removeObserver(observer: BookingAcceptedObserver ): void
}

@enduml
